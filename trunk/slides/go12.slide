New in Go 1.2/3
Oct 22, 2013

Dmitry Vyukov, Google
@dvyukov
http://www.1024cores.net

* Agenda

- Release Process
- Go 1.2 changes
- Go 1.3 planned changes

* Release Process

Go1.1: 1+ year
Go1.2: 6 months
maybe 4 months in future

* Go 1.2 changes

* Three-index slices

.play slice2.go /STARTMAIN/,/STOPMAIN/

* Three-index slices (2)

.play slice3.go /STARTMAIN/,/STOPMAIN/

* Use of nil

.play nil.go /STARTMAIN/,/STOPMAIN/

* Windows/BSD networking performance improvements

- Tighter integration with scheduler
- Eliminate all inter-connection synchronization
- Remove memory allocations
- Skip synchronous notifications
- Better timers
- GCQCEx
- etc

* Windows/BSD networking performance improvements (2)

Here are benchmark results vs pre-integrated network poller (which is roughly Go1.1) on Windows 7, Intel Q720 (4 HT cores, 1.6GHz):

 benchmark                             old ns/op    new ns/op    delta
 BenchmarkTCP4PersistentTimeout            84604        20536  -75.73%
 BenchmarkTCP4PersistentTimeout-4         298337         9096  -96.95%
 BenchmarkTCP4ConcurrentReadWrite          80704        18401  -77.20%
 BenchmarkTCP4ConcurrentReadWrite-4       359420         5860  -98.37%
 BenchmarkClientServerParallel4           130947        93545  -28.56%
 BenchmarkClientServerParallel4-4          83044        58483  -29.58%

 benchmark                            old allocs   new allocs    delta
 BenchmarkClientServerParallel4               83           69  -16.87%
 BenchmarkClientServerParallel4-4             95           79  -16.84%

* Goroutine Preemption

Everybody expects preemptive scheduling (even if you think you do not).

.play preempt.go /STARTMAIN/,/STOPMAIN/

* Goroutine Preemption (2)

Problem with goroutine stopping for GC.

Before:

 gc9(8): 0+0+661 ms
 gc10(8): 0+0+939 ms
 gc11(8): 0+0+907 ms

After:

 gc9(8): 0+0+124 ms
 gc10(8): 0+0+72 ms
 gc11(8): 0+0+121 ms

* Goroutine Preemption Implementation

Exploits split stack checks:

 struct G {  // Goroutine descriptor.
    uintptr stackguard;  // Stack segment limit.
    ...
 };

 __thread G* g;  // Current goroutine.

 func foo() {
    // Current segment has enough space?
    if (RSP - 0x123 < g->stackguard)
         // Grow stack.
         runtime.morestack();
    // Allocate stack frame.
    SUB 0x123, RSP
    ...

* Goroutine Preemption Implementation (2)

 // Background system thread.
 for each worker thread {
     if running the same goroutine for more than 10 ms
       g->stackguard = (uintptr)-1
 }

 runtime.morestack(G *g) {
     if (g->stackguard = (uintptr)-1)
         runtime.gosched()
     ...
 }

* Code Coverage

 $ go test -cover fmt
 ok   fmt 0.060s coverage: 91.4% of statements

* Race Detector

 $ go test -race
.play race.go /STARTMAIN/,/STOPMAIN/

* Lots of other stuff

http://tip.golang.org/doc/go1.2

* Go 1.3 planned changes

* Go 1.3 GC

- precise collection of stack frames (including liveness)
- concurrent sweep phase
- preparation for new GC impl
- new GC impl (very unlikely)
- heap dump in HPROF or similar format (unlikely)
- minor tuning

* Go 1.3 Stacks

- continuos stacks

* Go 1.3 G memory consumption:

- start new G with minimal stack frame
- free stack for finished goroutines
- move defer cache from G to P

* Go 1.3 Scheduler

- faster, scalable timers
- reduce contention on G start
- lock-free run queues (unlikely)
- lock-free channels (very unlikely)

* Go 1.3 Network poller:

- remove per-fd mutexes
- omit EPOLL_CTL_DEL if possible
- use SetFileIoOverlappedRange on windows (unlikely)
